substitutions:
  device_name: "neopixel-ring" #nome do MCU
  friendly_name: "Neopixel ring" #nome amigavel do MCU
  device_location: "Escritorio" # lugar onde está instalado
  device_extras: "D1 Mini " # descriçao das funçoes extras do MCU
  device_description: ${friendly_name} - ${device_location} - ${device_extras} # descriçao do MCU

<<: !include include/dados.yaml

esphome:
  name: '${device_name}'
  comment: '${device_description}'
  build_path: ./projectos/${friendly_name} - ${device_location}
  platform: ESP8266
  board: d1_mini

# Enable logging 
# DEBUG or null - (Default) - Color: cyan; 
# INFO - errors, warnings and info - Color: green;
# VERBOSE - Like debug, but a few more messages - Color: grey
# WARN - warnings and errors are logged - Color: yellow
logger:
  level: info

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key_neopixel    
ota:
  password: !secret ota_password_neopixel

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.1.119
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: !secret dns1_ip
    dns2: !secret dns2_ip

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Neopixel-Ring Fallback Hotspot"
    password: !secret wifi_ap_password
captive_portal:

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: GPIO2
    num_leds: 12
    name: ${friendly_name} - ${device_location} LEDs
    effects:
### addressable_wipe In        
      - addressable_lambda:
          name: "Wipe In"
          update_interval: 1ms
          lambda: |-
            static int x = 0;
            if (initial_run) {
              x = 0;
              it.all() = ESPColor(0,0,0);
            }
            if (x < it.size()) {
              it[x] = current_color;
              x += 1;
            }
### addressable_wipe Out
      - addressable_lambda:
          name: "Wipe Out"
          update_interval: 30ms
          lambda: |-
            static int x = 0;
            if (initial_run) {
              x = it.size();
            }
            if (x > 0) {
              x -= 1;
              it[x] = ESPColor(0,0,0);
            }      
### addressable_lento IN  Blue          
      - addressable_lambda:
          name: "Azul IN"
          update_interval: 1ms
          lambda: |-
            static int x = 0;
            if (initial_run) {
              x = 0;
              it.all() = ESPColor(0,0,0);
            }
            if (x < it.size()) {
              it[x] = ESPColor(0,0,255);
              x += 1;
            }    
      # Customize parameters
      - random:
          name: "Slow Random"
          transition_length: 10s
          update_interval: 10s
      - random:
          name: "Fast Random"
          transition_length: 4s
          update_interval: 5s
      - addressable_rainbow:
          name: Rainbow
          speed: 10
          width: 50
      - addressable_twinkle:
          name: Twinkle Effect
          twinkle_probability: 5%
          progress_interval: 4ms
      - addressable_random_twinkle:
          name: Random Twinkle
          twinkle_probability: 5%
          progress_interval: 32ms
      - addressable_fireworks:
          name: Fireworks
          update_interval: 32ms
          spark_probability: 10%
          use_random_color: false
          fade_out_rate: 120
      - addressable_flicker:
          name: Flicker
## Strobe RGB         
      - strobe:
      - strobe:
          name: Strobe Effect RGB
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 0%
              blue: 0%
              duration: 300ms
            - state: false
              duration: 200ms
            - state: true
              brightness: 100%
              red: 0%
              green: 100%
              blue: 0%
              duration: 300ms
            - state: false
              duration: 200ms
            - state: true
              brightness: 100%
              red: 0%
              green: 0%
              blue: 100%
              duration: 300ms
            - state: false
              duration: 200ms
## Strobe Vermelho        
      - strobe:
          name: Strobe Effect Vermelho
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 0%
              blue: 0%
              duration: 300ms
            - state: false
              duration: 200ms
## Strobe Verde        
      - strobe:
          name: Strobe Effect Verde
          colors:
            - state: true
              brightness: 100%
              red: 0%
              green: 100%
              blue: 0%
              duration: 300ms
            - state: false
              duration: 200ms
## Strobe Azul        
      - strobe:
          name: Strobe Effect Azul
          colors:
            - state: true
              brightness: 100%
              red: 0%
              green: 0%
              blue: 100%
              duration: 300ms
            - state: false
              duration: 200ms
## Strobe Azul        
      - strobe:
          name: Strobe Effect Branco
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 100%
              blue: 100%
              duration: 50ms
            - state: false
              duration: 30ms
#
            - state: true
              brightness: 100%
              red: 100%
              green: 100%
              blue: 100%
              duration: 80ms
            - state: false
              duration: 20ms
#
            - state: true
              brightness: 100%
              red: 100%
              green: 100%
              blue: 100%
              duration: 40ms
            - state: false
              duration: 60ms              




# Detector de presença LD2410B usando Binary-output
binary_sensor:
  - platform: gpio
    pin: D2
    name: ${friendly_name} - ${device_location} Movimento
    device_class: motion    

sensor:
# Diagnosticos
  - platform: uptime # Reporta o tempo de actividade online
    name: ${friendly_name} - ${device_location} Tempo Online
    icon: mdi:timeline-clock
    filters:
      - lambda: return x / 3600.0;

    unit_of_measurement: "horas"
    accuracy_decimals: 2 

  - platform: wifi_signal # Reporta a força do sinal WiFi em dB
    name: ${friendly_name} - ${device_location} Sinal WiFi dB
    id: wifi_signal_db
    update_interval: 60s

  - platform: copy # Reporta a força do sinal WiFi em %
    source_id: wifi_signal_db
    name: ${friendly_name} - ${device_location} Sinal WiFi %
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: " %"
