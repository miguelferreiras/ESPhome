light:  #### 46 LEDs enderessaveis RGB WS2811
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: GPIO3 # Pino RX cor verde
    num_leds: 46
    name: ${friendly_name} - ${device_location} NeoPixel Light
    id: candeeiro_led_rgb
    effects:
### addressable_wipe In        
      - addressable_lambda:
          name: "Wipe In"
          update_interval: 1ms
          lambda: |-
            static int x = 0;
            if (initial_run) {
              x = 0;
              it.all() = ESPColor(0,0,0);
            }
            if (x < it.size()) {
              it[x] = current_color;
              x += 1;
            }
### addressable_wipe Out
      - addressable_lambda:
          name: "Wipe Out"
          update_interval: 30ms
          lambda: |-
            static int x = 0;
            if (initial_run) {
              x = it.size();
            }
            if (x > 0) {
              x -= 1;
              it[x] = ESPColor(0,0,0);
            }      
### addressable_color_wipe
      - addressable_color_wipe:
      - addressable_color_wipe:
          name: Color Wipe Effect
          colors:
            - red: 100%
              green: 100%
              blue: 100%
              num_leds: 1
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 1
          add_led_interval: 100ms
          reverse: true #false
##  addressable_scan         
      - addressable_scan: 
      - addressable_scan:
          name: Scan Effect
          move_interval: 100ms 
          scan_width: 1
## Slow Random
      - random:
          name: "Slow Random"
          transition_length: 10s
          update_interval: 10s
## Fast Random          
      - random:
          name: "Fast Random"
          transition_length: 4s
          update_interval: 5s
## addressable_rainbow          
      - addressable_rainbow:
          name: Rainbow
          speed: 10
          width: 50
## addressable_twinkle          
      - addressable_twinkle:
          name: Twinkle Effect
          twinkle_probability: 5%
          progress_interval: 4ms
## addressable_random_twinkle          
      - addressable_random_twinkle:
          name: Random Twinkle
          twinkle_probability: 5%
          progress_interval: 32ms
## addressable_fireworks          
      - addressable_fireworks:
          name: Fireworks
          update_interval: 32ms
          spark_probability: 10%
          use_random_color: true #false
          fade_out_rate: 120
## dressable_flicker
      - addressable_flicker:
      - flicker:
      - flicker:
          name: Flicker Effect
          alpha: 95%
          intensity: 1.5%
## Pulse          
      - pulse:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
      - pulse:
          name: "Slow Pulse"
          # transition_length: 1s      # defaults to 1s
          update_interval: 2s
## Strobe          
      - strobe:
      - strobe:
          name: Strobe Effect
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 90%
              blue: 0%
              duration: 500ms
            - state: false
              duration: 250ms
            - state: true
              brightness: 100%
              red: 0%
              green: 100%
              blue: 0%
              duration: 500ms
## O meu primeiro efeito           
      - lambda:
          name: "O meu primeiro efeito"
          update_interval: 1s
          lambda: |-
            static int state = 0;
            auto call = id(candeeiro_led_rgb).turn_on();
            // Transition of 1000ms = 1s
            call.set_transition_length(1000);
            if (state == 0) {
              call.set_rgb(1.0, 1.0, 1.0);
            } else if (state == 1) {
              call.set_rgb(1.0, 0.0, 1.0);
            } else if (state == 2) {
              call.set_rgb(0.0, 0.0, 1.0);
            } else {
              call.set_rgb(1.0, 0.0, 0.0);
            }
            call.perform();
            state += 1;
            if (state == 4)
              state = 0;
## o meu segundo efeito
      - addressable_lambda:
          name: "O meu segundo efeito"
          update_interval: 16ms
          lambda: |-
            // it.size() - Number of LEDs
            // it[num] - Access the LED at index num.
            // Set the LED at num to the given r, g, b values
            // it[num] = Color(r, g, b);
            // Get the color at index num (Color instance)
            // it[num].get();

            // Example: Simple color wipe
            for (int i = it.size() - 1; i > 0; i--) {
              it[i] = it[i - 1].get();
            }
            it[0] = Color::random_color();

            // Bonus: use .range() and .all() to set many LEDs without having to write a loop.
            it.range(0, 50) = Color::BLACK;
            it.all().fade_to_black(10); 
## O meu terceiro efeito
      - addressable_lambda:
          name: "O meu terceiro efeito"
          update_interval: 16ms
          lambda: |-
            // Static variables keep their value even when
            // stopping and starting the effect again
            static uint16_t progress = 0;

            // normal variables lost their value after each
            // execution - basically after each update_interval
            uint16_t changes = 0;

            // To reset static when stopping and starting the effect
            // again you can use the initial_run variables
            if (initial_run) {
              progress = 0;
              it.all() = Color::BLACK;
              // optionally do a return so nothing happens until the next update_interval
              return;
            }
